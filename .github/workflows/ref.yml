

name: Deploy

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1
  AWS_ROLE_TO_ASSUME: arn:aws:iam::042445652404:role/github-terragrunt-logscale-multicloud
  CLOUD_ENV: ref
  tf_version: '1.8.4'
  tg_version: '0.58.11'
  working_dir: 'env/ref'
  TF_PLUGIN_CACHE_DIR: ${{ github.workspace }}/.terraform.d/plugin-cache

permissions:
  contents: read
  id-token: write

jobs:
  checks:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: Check terragrunt HCL
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.working_dir }}
          tg_command: 'hclfmt --terragrunt-check --terragrunt-diff'
          
  plan:
    runs-on: ubuntu-latest
    needs: [ checks ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Create Terraform Plugin Cache Dir
        run: mkdir -p $TF_PLUGIN_CACHE_DIR
  
      # - name: Terraform Plugin Cache
      #   uses: actions/cache@v4.0.1
      #   with:
      #     path: ${{ env.TF_PLUGIN_CACHE_DIR }}
      #     key: ${{ runner.os }}-terraform-plugin-cache-${{ hashFiles('**/.terraform.lock.hcl') }}
      - name: init
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.working_dir }}
          tg_command: 'run-all init --upgrade'      
      - name: Plan
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.working_dir }}
          tg_command: 'run-all plan'          

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [ plan ]
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        audience: sts.amazonaws.com
        role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
        aws-region: ${{ env.AWS_REGION }}
    - name: init
      uses: gruntwork-io/terragrunt-action@v2
      with:
        tf_version: ${{ env.tf_version }}
        tg_version: ${{ env.tg_version }}
        tg_dir: ${{ env.working_dir }}
        tg_command: 'run-all init --upgrade'      

    - name: Apply
      uses: gruntwork-io/terragrunt-action@v2
      with:
        tf_version: ${{ env.tf_version }}
        tg_version: ${{ env.tg_version }}
        tg_dir: ${{ env.working_dir }}
        tg_command: 'run-all apply'       