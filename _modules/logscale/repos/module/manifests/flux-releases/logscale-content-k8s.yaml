apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: logscale-content-k8s
  namespace: ${namespace}
spec:
  interval: 10m
  timeout: 5m
  chart:
    spec:
      chart: raw
      version: "2.0.0"
      sourceRef:
        kind: HelmRepository
        name: bedag
        namespace: flux-repos
      interval: 5m
  releaseName: logscale-content-k8s
  install:
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
  test:
    enable: false
  driftDetection:
    mode: warn
    ignore:
      - paths: ["/spec/replicas"]
        target:
          kind: Deployment
  dependsOn:
    - name: logscale
  values:
    templates:
      - |
        apiVersion: core.humio.com/v1alpha1
        kind: HumioRepository
        metadata:
          name: infra-kubernetes
        spec:
          managedClusterName: ${cluster_name}
          name: "infra-kubernetes"
          description: "Kubernetes infrastructure logs"
          allowDataDeletion: ${allowDataDeletion}
          retention:
            timeInDays: 30
      - |
        apiVersion: core.humio.com/v1alpha1
        kind: HumioParser
        metadata:
          name: otel-humio
        spec:
          managedClusterName: ${cluster_name}
          name: "otel-humio"
          parserScript: |
            parseJson(excludeEmpty=true,handleNull=discard)
            | case {
              scopeLog.logRecord.attributes.k8s.resource.name="events"
              | %type:=events
              | parseTimestamp(field="scopeLog.logRecord.observedTimeUnix.millis",format=millis,addErrors=false)
              ;
              *
                | parseTimestamp(field="scopeLog.logRecord.attributes.time",addErrors=false)
                | case {
                  scopeLog.logRecord.body=* AND scopeLog.logRecord.body=/^{.*}$/
                    | parseJson(field=scopeLog.logRecord.body,prefix="scopeLog.logRecord.body.",handleNull=discard)
                    | case {
                      "scopeLog.logRecord.body.message"=* | rename(field=scopeLog.logRecord.body.message,as=@rawstring);
                      "scopeLog.logRecord.body.msg"=* | rename(field=scopeLog.logRecord.body.msg,as=@rawstring);
                      rename(field=scopeLog.logRecord.body,as=@rawstring);
                    }
                    ;
                  scopeLog.logRecord.body=* | rename(field=scopeLog.logRecord.body,as=@rawstring);
                  *;
                }
            ;
            }

            | case {
              "resource.attributes.app.kubernetes.io/managed-by"="humio-operator" AND "resource.attributes.app.kubernetes.io/name"="humio"
                | parseTimestamp(field="scopeLog.logRecord.body.@timestamp",format=millis,addErrors=false)
                | rename(field=[
                  [scopeLog.logRecord.body.vhost,%vhost],
                  [scopeLog.logRecord.body.kind,%kind],
                  [scopeLog.logRecord.body.class,class],
                  [scopeLog.logRecord.body.loglevel,loglevel],
                  [scopeLog.logRecord.body.thread,thread],
                  [scopeLog.logRecord.body.message,@rawstring]
                ])
                | drop(fields=[scopeLog.logRecord.body,"scopeLog.logRecord.body.@timestamp"])
                | %type :="humio"
                | kvParse(excludeEmpty=true)
                ;
              "resource.attributes.app.kubernetes.io/managed-by"="Helm" AND "resource.attributes.app.kubernetes.io/name"="humio-operator"
                | %type :="humio-operator"
                ;
              *;

            }
          repositoryName: "infra-kubernetes"
          tagFields:
          - "%vhost"
          - "%type"
          - "%kind"
          - "resource.attributes.cloud.platform"
          - "resource.attributes.cloud.provider"
          - "resource.attributes.cloud.region"
          - "resource.attributes.k8s.namespace.name"
      - |
        apiVersion: core.humio.com/v1alpha1
        kind: HumioRepository
        metadata:
          name: apps-kubernetes
        spec:
          managedClusterName: ${cluster_name}
          name: "apps-kubernetes"
          description: "Kubernetes apps logs"
          allowDataDeletion: ${allowDataDeletion}
          retention:
            timeInDays: 30
      - |
        apiVersion: core.humio.com/v1alpha1
        kind: HumioRepository
        metadata:
          name: metrics-kubernetes
        spec:
          managedClusterName: ${cluster_name}
          name: "metrics-kubernetes"
          description: "Kubernetes metrics"
          allowDataDeletion: ${allowDataDeletion}
          retention:
            timeInDays: 30
