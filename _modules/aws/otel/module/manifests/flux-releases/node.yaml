apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: otel-node
  namespace: kube-system
spec:
  interval: 10m
  timeout: 5m
  chart:
    spec:
      chart: opentelemetry-collector
      version: "0.101.2"
      sourceRef:
        kind: HelmRepository
        name: otel
        namespace: flux-repos
      interval: 5m
  releaseName: otel-node
  targetNamespace: kube-system
  install:
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
  test:
    enable: false
  driftDetection:
    mode: enabled
  values:
    mode: daemonset

    image:
      repository: "otel/opentelemetry-collector-k8s"

    command:
      name: "otelcol-k8s"
    extraEnvs:
      # - name: K8S_NODE_NAME
      #   valueFrom:
      #     fieldRef:
      #       fieldPath: spec.nodeName
      - name: HUMIO_TOKEN_K8S_LOGS
        valueFrom:
          secretKeyRef:
            name: infra-kubernetes-ingest-token
            key: token
      - name: HUMIO_TOKEN_K8S_METRICS
        valueFrom:
          secretKeyRef:
            name: metrics-kubernetes-ingest-token
            key: token
      - name: HUMIO_INGEST_HOST
        value: logscale-ingest.partition.ref.logsr.life
      - name: HOST_PROC
        value: /hostfs/proc
      - name: HOST_SYS
        value: /hostfs/sys
      - name: HOST_ETC
        value: /hostfs/etc
      - name: HOST_VAR
        value: /hostfs/var
      - name: HOST_RUN
        value: /hostfs/run
      - name: HOST_DEV
        value: /hostfs/dev
      - name: HOST_ROOT
        value: /hostfs
    # This also supports template content, which will eventually be converted to yaml.
    extraVolumes:
      - name: machineid
        # mount /data/foo, but only if that directory already exists
        hostPath:
          path: /etc/machine-id # directory location on host
          type: File # this field is optional
    # This also supports template content, which will eventually be converted to yaml.
    extraVolumeMounts:
      - mountPath: /etc/machine-id
        name: machineid
        readOnly: true
    serviceAccount:
      create: true
      annotations:
        eks.amazonaws.com/role-arn: arn:aws:iam::042445652404:role/otel-sa20240817134336470800000002
    clusterRole:
      create: true
      rules:
        - apiGroups: [""]
          resources: ["configmaps", "nodes"]
          verbs: ["get", "watch", "list"]
    rollout:
      rollingUpdate:
        # When 'mode: daemonset', maxSurge cannot be used when hostPort is set for any of the ports
        # maxSurge: 25%
        maxUnavailable: 50%
    service:
      enabled: true
    presets:
      logsCollection:
        enabled: true
        includeCollectorLogs: true
        storeCheckpoints: true
      kubernetesAttributes:
        enabled: true
        extractAllPodLabels: true
      hostMetrics:
        enabled: true
    config:
      receivers:
        jaeger:
          protocols:
            grpc:
              endpoint: "[$${env:MY_POD_IP}]:14250"
            thrift_http:
              endpoint: "[$${env:MY_POD_IP}]:14268"
            thrift_compact:
              endpoint: "[$${env:MY_POD_IP}]:6831"
        otlp:
          protocols:
            grpc:
              endpoint: "[$${env:MY_POD_IP}]:4317"
            http:
              endpoint: "[$${env:MY_POD_IP}]:4318"
        prometheus:
          config:
            scrape_configs:
              - job_name: opentelemetry-collector
                scrape_interval: 10s
                static_configs:
                  - targets:
                      - "[$${env:MY_POD_IP}]:8888"
        zipkin:
          endpoint: "[$${env:MY_POD_IP}]:9411"
        filelog:
          exclude: []
          include:
            - /var/log/pods/*/*/*.log
          include_file_name: false
          include_file_path: true
          operators:
            - id: container-parser
              max_log_size: 102400
              type: container
              on_error: send_quiet
            - id: body-router
              type: router
              routes:
                - output: body-parser-json
                  expr: 'body matches "^{.*}$"'
                  attributes:
                    log.format: json
              default: body-end
            - id: body-parser-json
              type: json_parser
              output: body-end
              on_error: send_quiet
            - id: body-end
              type: noop
            - id: body-move-message
              type: move
              from: attributes.message
              to: body
              if: 'attributes.message matches "^."'
              on_error: send_quiet
            - id: body-move-msg
              type: move
              from: attributes.msg
              to: body
              if: 'attributes.msg matches "^."'
              on_error: send_quiet
            - id: app-router
              type: router
              routes:
                - output: app-logscale
                  expr: 'attributes.kind matches "^." and attributes.vhost matches "^\\d*"'
                  attributes:
                    log.app: logscale
              default: app-end
            - id: app-logscale
              type: noop
            - id: app-logscale-router
              type: router
              routes:
                - output: app-logscale-activity
                  expr: 'attributes.kind == "activity"'
                - output: app-logscale-audit
                  expr: 'attributes.kind == "audit"'
                - output: app-logscale-logs
                  expr: 'attributes.kind == "logs"'
                - output: app-logscale-nonsensitive
                  expr: 'attributes.kind == "nonsensitive"'
                - output: app-logscale-metrics
                  expr: 'attributes.kind == "metrics"'
                - output: app-logscale-threaddumps
                  expr: 'attributes.kind == "threaddumps"'
                - output: app-logscale-requests
                  expr: 'attributes.kind == "requests"'
                  # expr: 'attributes.kind matches "^(logs|||||analytics|frontend)"'
              #     - output: app-logscale-threaddumps
              #       expr: 'attributes.kind == "threaddumps" '
              #     # - output: app-logscale-logs
              #     #   expr: 'attributes.kind == "logs" '
              default: app-end
            - id: app-logscale-threaddumps
              type: regex_parser
              parse_from: body
              regex: '^[^ ]+ [^ ]+ [^ ]+ [^ ]+ (?P<pairs>.*)\n(?P<message>(?:.*\n?)*)'
              on_error: send_quiet
            - id: app-logscale-threaddumps-kv
              type: key_value_parser
              parse_from: attributes.pairs
              on_error: send_quiet
            - id: app-logscale-threaddumps-remove-pairs
              type: remove
              field: attributes.pairs
              on_error: send_quiet
            - id: app-logscale-threaddumps-move-message
              type: move
              from: attributes.message
              to: body
              on_error: send_quiet
              output: app-end
            - id: app-logscale-metrics
              type: regex_parser
              parse_from: body
              regex: "^[^ ]+ [^ ]+ [^ ]+ [^ ]+ (?P<pairs>(?s).*)"
              on_error: send_quiet
            - id: app-logscale-metrics-kv
              type: key_value_parser
              parse_from: attributes.pairs
              pair_delimiter: ","
              on_error: send_quiet
            - id: app-logscale-metrics-move-pairs
              type: move
              from: attributes.pairs
              to: body
              on_error: send_quiet
              output: app-end
            - id: app-logscale-nonsensitive
              type: regex_parser
              parse_from: body
              regex: "^[^ ]+ [^ ]+ [^ ]+ [^ ]+ (?P<pairs>(?s).*)"
              on_error: send_quiet
            - id: app-logscale-nonsensitive-kv
              type: key_value_parser
              parse_from: attributes.pairs
              on_error: send_quiet
            - id: app-logscale-nonsensitive-move-pairs
              type: move
              from: attributes.pairs
              to: body
              on_error: send_quiet
              output: app-end
            - id: app-logscale-requests
              type: regex_parser
              parse_from: body
              regex: "^[^ ]+ [^ ]+ [^ ]+ [^ ]+ (?P<pairs>.*)"
              on_error: send_quiet
            - id: app-logscale-requests-kv
              type: key_value_parser
              parse_from: attributes.pairs
              pair_delimiter: ","
              on_error: send_quiet
            - id: app-logscale-requests-move-pairs
              type: move
              from: attributes.pairs
              to: body
              on_error: send_quiet
              output: app-end

            - id: app-logscale-activity
              type: regex_parser
              parse_from: body
              regex: "^[^ ]+ [^ ]+ [^ ]+ [^ ]+ (?P<pairs>.*)"
              on_error: send_quiet
            - id: app-logscale-activity-kv
              type: key_value_parser
              parse_from: attributes.pairs
              # pair_delimiter: ","
              on_error: send_quiet
            - id: app-logscale-activity-move-pairs
              type: move
              from: attributes.pairs
              to: body
              on_error: send_quiet
              output: app-end

            - id: app-logscale-audit
              type: json_parser
              output: app-end
              on_error: send_quiet

            - id: app-logscale-logs
              type: noop
            - id: app-logscale-logs-parse-body
              type: regex_parser
              parse_from: body
              regex: "^[^ ]+ \\[[^]]+] +[A-Z]+ +[^ ]+ +\\d+ +[^ ]+ +(?P<body>(?s).*)"
              on_error: send_quiet
            - id: app-logscale-logs-move-body
              type: move
              from: attributes.body
              to: body
              on_error: send_quiet
            - id: app-logscale-format-router
              type: router
              routes:
                - output: app-end # no values
                  expr: |
                    body matches "^[^=]+$"
                  attributes:
                    log.bodyType: nokv
                - output: app-logscale-format-mkv
                  expr: |
                    body matches "^(?:(?P<message>[^=]*) )(?P<pairs>(?:[^ =]+=(?:'[^']+'|[^ ])+(?: |$))+)$"
                  attributes:
                    log.bodyType: mkv
                - output: app-logscale-format-kv
                  expr: |
                    body matches "^(?P<pairs>(?:[^ =]+=(?:'[^']+'|[^ ])+(?: |$))+)$"
                  attributes:
                    log.bodyType: kv
                - output: app-logscale-format-fmt
                  expr: |
                    body matches "[^ =]+=(?:'[^']+'|[^ ]+)"
                  attributes:
                    log.bodyType: fmt
              default: app-end
            - id: app-logscale-format-mkv
              type: regex_parser
              parse_from: body
              regex: "^(?:(?P<message>[^=]*):? )(?P<pairs>(?:[^ =]+=[^ ]+(?: |$))+)$"
              on_error: send_quiet
            - id: app-logscale-format-mkv-parse
              type: key_value_parser
              parse_from: attributes.pairs
              on_error: send_quiet
            - id: app-logscale-logs-mkv-remove-pairs
              type: remove
              field: attributes.pairs
              on_error: send_quiet
            - id: app-logscale-logs-mkv-move-message
              type: move
              from: attributes.message
              to: body
              if: 'attributes.message matches "^."'
              on_error: send_quiet
              output: app-end

            - id: app-logscale-format-kv
              type: regex_parser
              parse_from: body
              regex: "^(?P<pairs>(?:[^ =]+=(?:'[^']+'|[^ ])+(?: |$))+)$"
              on_error: send_quiet
            - id: app-logscale-format-kv-parse
              type: key_value_parser
              parse_from: attributes.pairs
              on_error: send_quiet
            - id: app-logscale-logs-kv-remove-pairs
              type: remove
              field: attributes.pairs
              on_error: send_quiet
              output: app-end

            - id: app-logscale-format-fmt
              type: noop
              # type: key_value_parser
              # parse_from: body
              # on_error: send_quiet
              output: app-end

            - id: app-end
              type: noop

          start_at: beginning

      extensions:
        health_check:
          endpoint: "[$${env:MY_POD_IP}]:13133"
      processors:
        batch:
          send_batch_size: 1000
          send_batch_max_size: 1500
          timeout: 5s
        k8sattributes:
          extract:
            metadata:
              - k8s.namespace.name
              - k8s.deployment.name
              - k8s.statefulset.name
              - k8s.daemonset.name
              - k8s.cronjob.name
              - k8s.job.name
              - k8s.node.name
              - k8s.pod.name
              - k8s.pod.uid
              - k8s.pod.start_time
              - container.image.name
              - container.image.tag
          passthrough: false
          pod_association:
            - sources:
                - from: resource_attribute
                  name: k8s.pod.ip
            - sources:
                - from: resource_attribute
                  name: k8s.pod.uid
            - sources:
                - from: connection
        resourcedetection/env:
          detectors: [env]
          timeout: 2s
          override: false
        resourcedetection/system:
          detectors: [system]
          timeout: 2s
          override: false
          system:
            hostname_sources: ["os"]
            resource_attributes:
              host.arch:
                enabled: true
              host.id:
                enabled: true
              host.name:
                enabled: false
              host.cpu.vendor.id:
                enabled: true
              host.cpu.family:
                enabled: true
              host.cpu.model.id:
                enabled: true
              host.cpu.model.name:
                enabled: true
              os.description:
                enabled: true
              os.type:
                enabled: true
        resourcedetection/cloud:
          detectors: [ec2]
          timeout: 15s
          override: false
          ec2:
            # A list of regex's to match tag keys to add as resource attributes can be specified
            tags:
              - ^.
            resource_attributes:
              host.name:
                enabled: true
              host.id:
                enabled: true
        resourcedetection/k8s:
          detectors: [k8snode, eks]
          timeout: 15s
          override: false
          eks:
            resource_attributes:
              k8s.cluster.name:
                enabled: true

        memory_limiter:
          check_interval: 5s
          limit_percentage: 80
          spike_limit_percentage: 25
      exporters:
        otlphttp/k8s_logs:
          endpoint: https://logscale-ingest.partition.ref.logsr.life/api/v1/ingest/otlp
          headers:
            Authorization: Bearer $${env:HUMIO_TOKEN_K8S_LOGS}
          sending_queue:
            enabled: true
          write_buffer_size: 2097152
          retry_on_failure:
            enabled: true
            initial_interval: 10s
            randomization_factor: 0.7
            multiplier: 1.3
            max_interval: 60s
            max_elapsed_time: 10m
        otlphttp/k8s_metrics:
          endpoint: https://logscale-ingest.partition.ref.logsr.life/api/v1/ingest/otlp
          headers:
            Authorization: Bearer $${env:HUMIO_TOKEN_K8S_METRICS}
          sending_queue:
            enabled: true
          write_buffer_size: 2097152
          retry_on_failure:
            enabled: true
            initial_interval: 10s
            randomization_factor: 0.7
            multiplier: 1.3
            max_interval: 60s
            max_elapsed_time: 10m
      service:
        pipelines:
          logs:
            receivers:
              - filelog
              - otlp
            processors:
              - resourcedetection/system
              - resourcedetection/env
              - resourcedetection/k8s
              - resourcedetection/cloud
              - k8sattributes
              - batch
            exporters:
              - otlphttp/k8s_logs
              - debug
          metrics:
            exporters:
              - otlphttp/k8s_metrics
            processors:
              - memory_limiter
              - batch
            receivers:
              - otlp
              - prometheus
              - hostmetrics
        telemetry:
          logs:
            encoding: json
          metrics:
            address: "[$${env:MY_POD_IP}]:8888"
