apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: karpenter-nodes
  namespace: flux-system
spec:
  interval: 10m
  timeout: 5m
  chart:
    spec:
      chart: raw
      version: "2.0.0"
      sourceRef:
        kind: HelmRepository
        name: bedag
      interval: 5m
  releaseName: karpenter-nodes
  targetNamespace: karpenter
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
  test:
    enable: false
  driftDetection:
    mode: warn
    ignore:
      - paths: ["/spec/replicas"]
        target:
          kind: Deployment
  dependsOn:
    - name: karpenter
  valuesFrom:
    - kind: ConfigMap
      name: clustervars
      valuesKey: aws_eks_cluster_name
      targetPath: settings.clusterName
    - kind: ConfigMap
      name: clustervars
      valuesKey: aws_eks_endpoint
      targetPath: settings.clusterEndpoint
    - kind: ConfigMap
      name: clustervars
      valuesKey: aws_eks_sqsinterruptionQueueName
      targetPath: settings.interruptionQueueName
    - kind: ConfigMap
      name: clustervars
      valuesKey: aws_role_name_karpenter
      targetPath: settings.role_name
  values:
    templates:
      - |
        apiVersion: karpenter.k8s.aws/v1beta1
        kind: EC2NodeClass
        metadata:
          name: bottle
        spec:
          amiFamily: Bottlerocket
          role: {{ .Values.settings.role_name }}
          subnetSelectorTerms:
          - tags:
              karpenter.sh/discovery: {{ .Values.settings.clusterName }}
          securityGroupSelectorTerms:
          - tags:
              karpenter.sh/discovery: {{ .Values.settings.clusterName }}
          tags:
            karpenter.sh/discovery: {{ .Values.settings.clusterName }}
      - |
        apiVersion: karpenter.k8s.aws/v1beta1
        kind: EC2NodeClass
        metadata:
          name: al2
        spec:
          amiFamily: AL2
          role: {{ .Values.settings.role_name }}
          subnetSelectorTerms:
          - tags:
              karpenter.sh/discovery: {{ .Values.settings.clusterName }}
          securityGroupSelectorTerms:
          - tags:
              karpenter.sh/discovery: {{ .Values.settings.clusterName }}
          tags:
            karpenter.sh/discovery: {{ .Values.settings.clusterName }}
      - |
        apiVersion: karpenter.k8s.aws/v1beta1
        kind: EC2NodeClass
        metadata:
          name: ubuntu
        spec:
          amiFamily: Ubuntu
          role: {{ .Values.settings.role_name }}
          subnetSelectorTerms:
          - tags:
              karpenter.sh/discovery: {{ .Values.settings.clusterName }}
          securityGroupSelectorTerms:
          - tags:
              karpenter.sh/discovery: {{ .Values.settings.clusterName }}
          tags:
            karpenter.sh/discovery: {{ .Values.settings.clusterName }}
      - |
        apiVersion: karpenter.sh/v1beta1
        kind: NodePool
        metadata:
          name: general
        spec:
          template:
            metadata:
              # Labels are arbitrary key-values that are applied to all nodes
              labels:
                storageClass: "network"
            spec:
              nodeClassRef:
                name: bottle
              requirements:
                - key: "kubernetes.io/os"
                  operator: In
                  values: ["linux"]              
                - key: "karpenter.k8s.aws/instance-encryption-in-transit-supported"
                  operator: In
                  values: ["true"]
                - key: "karpenter.k8s.aws/instance-hypervisor"
                  operator: In
                  values: ["nitro"]
                - key: "karpenter.k8s.aws/instance-local-nvme"
                  operator: DoesNotExist
                - key: "karpenter.k8s.aws/instance-category"
                  operator: In
                  values: ["c", "m", "r"]                                  
              startupTaints:
                - key: ebs.csi.aws.com/agent-not-ready
                  value: "true"
                  effect: NoExecute    
                - key: efs.csi.aws.com/agent-not-ready
                  value: "true"
                  effect: NoExecute    
            kubelet:
              podsPerCore: 4
          limits:
            cpu: 1000
          disruption:
            consolidationPolicy: WhenUnderutilized
          weight: 100
      - |
        apiVersion: karpenter.sh/v1beta1
        kind: NodePool
        metadata:
          name: storage
        spec:
          template:
            metadata:
              # Labels are arbitrary key-values that are applied to all nodes
              labels:
                storageClass: "nvme"
            spec:
              nodeClassRef:
                name: ubuntu
              requirements:
                - key: "kubernetes.io/arch"
                  operator: In
                  values: ["amd64"]              
                - key: "kubernetes.io/os"
                  operator: In
                  values: ["linux"]              
                - key: "karpenter.k8s.aws/instance-encryption-in-transit-supported"
                  operator: In
                  values: ["true"]
                - key: "karpenter.k8s.aws/instance-generation"
                  operator: Gt
                  values: ["3"]
                - key: "karpenter.k8s.aws/instance-hypervisor"
                  operator: In
                  values: ["nitro"]
                - key: "karpenter.k8s.aws/instance-category"
                  operator: In
                  values: ["i"]
                - key: "karpenter.k8s.aws/instance-cpu"
                  operator: Gt
                  values: ["4"]
              startupTaints:
                - key: ebs.csi.aws.com/agent-not-ready
                  value: "true"
                  effect: NoExecute    
                - key: efs.csi.aws.com/agent-not-ready
                  value: "true"
                  effect: NoExecute   
              # taints:
              #   - key: topolvm.io/local
              #     value: "true"
              #     effect: PreferNoSchedule   
            kubelet:
              podsPerCore: 4
          limits:
            cpu: 1000
          disruption:
            consolidationPolicy: WhenUnderutilized
          weight: 20
